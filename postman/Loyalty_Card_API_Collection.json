{
	"info": {
		"_postman_id": "loyalty-card-api-collection",
		"name": "Loyalty Card API",
		"description": "Complete API collection for testing the Spring Boot loyalty card backend with JWT authentication",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "User Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for successful signup",
									"pm.test(\"Status code is 200 or 201\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									"",
									"pm.test(\"Response contains user data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('email');",
									"});",
									"",
									"// Store user data for other requests",
									"if (pm.response.code === 200 || pm.response.code === 201) {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set('user_id', jsonData.id);",
									"    pm.environment.set('user_email', jsonData.email);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"testuser@example.com\",\n    \"password\": \"password123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/auth/signup",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"signup"
							]
						},
						"description": "Register a new user account. Creates a new user with email and password."
					},
					"response": [
						{
							"name": "Successful Signup",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"testuser@example.com\",\n    \"password\": \"password123\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/auth/signup",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"auth",
										"signup"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": \"user123\",\n    \"email\": \"testuser@example.com\",\n    \"createdAt\": \"2025-07-19T10:30:00Z\",\n    \"roles\": [\"ROLE_USER\"]\n}"
						},
						{
							"name": "Email Already Exists",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"existing@example.com\",\n    \"password\": \"password123\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/auth/signup",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"auth",
										"signup"
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"error\": \"User already exists\",\n    \"message\": \"A user with this email already exists\",\n    \"timestamp\": \"2025-07-19T10:30:00Z\"\n}"
						}
					]
				},
				{
					"name": "User Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for successful login",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains JWT token\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('token');",
									"    pm.expect(jsonData.token).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Response contains user info\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('user');",
									"    pm.expect(jsonData.user).to.have.property('email');",
									"});",
									"",
									"// Store JWT token for authenticated requests",
									"if (pm.response.code === 200) {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set('jwt_token', jsonData.token);",
									"    pm.environment.set('user_id', jsonData.user.id);",
									"    pm.environment.set('user_email', jsonData.user.email);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"testuser@example.com\",\n    \"password\": \"password123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"login"
							]
						},
						"description": "Authenticate user and receive JWT token for protected routes."
					},
					"response": [
						{
							"name": "Successful Login",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"testuser@example.com\",\n    \"password\": \"password123\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/auth/login",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ0ZXN0dXNlckBleGFtcGxlLmNvbSIsImlhdCI6MTY4NzQ0MDAwMCwiZXhwIjoxNjg3NTI2NDAwfQ.example_jwt_token_signature\",\n    \"type\": \"Bearer\",\n    \"expiresIn\": 86400,\n    \"user\": {\n        \"id\": \"user123\",\n        \"email\": \"testuser@example.com\",\n        \"createdAt\": \"2025-07-19T10:30:00Z\",\n        \"roles\": [\"ROLE_USER\"]\n    }\n}"
						},
						{
							"name": "Invalid Credentials",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"testuser@example.com\",\n    \"password\": \"wrongpassword\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/auth/login",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"error\": \"Unauthorized\",\n    \"message\": \"Invalid email or password\",\n    \"timestamp\": \"2025-07-19T10:30:00Z\"\n}"
						}
					]
				}
			],
			"description": "Authentication endpoints for user registration and login"
		},
		{
			"name": "Loyalty Cards",
			"item": [
				{
					"name": "Get All Cards",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for successful retrieval",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is an array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"});",
									"",
									"// If cards exist, validate structure",
									"pm.test(\"Cards have required properties\", function () {",
									"    var jsonData = pm.response.json();",
									"    if (jsonData.length > 0) {",
									"        pm.expect(jsonData[0]).to.have.property('id');",
									"        pm.expect(jsonData[0]).to.have.property('cardName');",
									"        pm.expect(jsonData[0]).to.have.property('barcodeData');",
									"        pm.expect(jsonData[0]).to.have.property('barcodeType');",
									"    }",
									"});",
									"",
									"// Store first card ID for other tests",
									"if (pm.response.code === 200) {",
									"    var jsonData = pm.response.json();",
									"    if (jsonData.length > 0) {",
									"        pm.environment.set('first_card_id', jsonData[0].id);",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}",
								"description": "JWT token from login"
							}
						],
						"url": {
							"raw": "{{base_url}}/cards",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"cards"
							]
						},
						"description": "Get all loyalty cards for the authenticated user. Requires JWT token."
					},
					"response": [
						{
							"name": "Success - With Cards",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.example"
									}
								],
								"url": {
									"raw": "{{base_url}}/cards",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"cards"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"id\": 1,\n        \"cardName\": \"Starbucks Rewards\",\n        \"barcodeData\": \"1234567890123\",\n        \"barcodeType\": \"EAN13\",\n        \"storeLogoUrl\": \"https://example.com/starbucks-logo.png\",\n        \"createdAt\": \"2025-07-19T08:30:00Z\"\n    },\n    {\n        \"id\": 2,\n        \"cardName\": \"Woolworths MySchool\",\n        \"barcodeData\": \"9876543210987\",\n        \"barcodeType\": \"CODE128\",\n        \"storeLogoUrl\": null,\n        \"createdAt\": \"2025-07-19T09:15:00Z\"\n    },\n    {\n        \"id\": 3,\n        \"cardName\": \"Pick n Pay Smart Shopper\",\n        \"barcodeData\": \"QR-CODE-DATA-HERE\",\n        \"barcodeType\": \"QRCODE\",\n        \"storeLogoUrl\": \"https://example.com/pnp-logo.png\",\n        \"createdAt\": \"2025-07-19T10:00:00Z\"\n    }\n]"
						},
						{
							"name": "Success - No Cards",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.example"
									}
								],
								"url": {
									"raw": "{{base_url}}/cards",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"cards"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[]"
						},
						{
							"name": "Unauthorized - No Token",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/cards",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"cards"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"error\": \"Unauthorized\",\n    \"message\": \"JWT token is missing or invalid\",\n    \"timestamp\": \"2025-07-19T10:30:00Z\"\n}"
						}
					]
				},
				{
					"name": "Create New Card",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for successful card creation",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response contains created card\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('cardName');",
									"    pm.expect(jsonData).to.have.property('barcodeData');",
									"    pm.expect(jsonData).to.have.property('barcodeType');",
									"    pm.expect(jsonData).to.have.property('createdAt');",
									"});",
									"",
									"pm.test(\"Card data matches request\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.cardName).to.eql('Checkers Xtra Savings');",
									"    pm.expect(jsonData.barcodeData).to.eql('1122334455667');",
									"    pm.expect(jsonData.barcodeType).to.eql('EAN13');",
									"});",
									"",
									"// Store created card ID for future tests",
									"if (pm.response.code === 201) {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set('created_card_id', jsonData.id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}",
								"description": "JWT token from login"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"cardName\": \"Checkers Xtra Savings\",\n    \"barcodeData\": \"1122334455667\",\n    \"barcodeType\": \"EAN13\",\n    \"storeLogoUrl\": \"https://example.com/checkers-logo.png\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/cards",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"cards"
							]
						},
						"description": "Create a new loyalty card for the authenticated user. Requires JWT token."
					},
					"response": [
						{
							"name": "Successful Creation",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.example"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"cardName\": \"Checkers Xtra Savings\",\n    \"barcodeData\": \"1122334455667\",\n    \"barcodeType\": \"EAN13\",\n    \"storeLogoUrl\": \"https://example.com/checkers-logo.png\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/cards",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"cards"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 4,\n    \"cardName\": \"Checkers Xtra Savings\",\n    \"barcodeData\": \"1122334455667\",\n    \"barcodeType\": \"EAN13\",\n    \"storeLogoUrl\": \"https://example.com/checkers-logo.png\",\n    \"createdAt\": \"2025-07-19T10:45:00Z\"\n}"
						},
						{
							"name": "Validation Error",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.example"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"cardName\": \"\",\n    \"barcodeData\": \"\",\n    \"barcodeType\": \"INVALID_TYPE\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/cards",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"cards"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"error\": \"Validation Failed\",\n    \"message\": \"Invalid input data\",\n    \"details\": {\n        \"cardName\": \"Card name cannot be empty\",\n        \"barcodeData\": \"Barcode data cannot be empty\",\n        \"barcodeType\": \"Invalid barcode type. Allowed: CODE128, CODE39, EAN13, EAN8, UPCA, UPCE, QRCODE, PDF417\"\n    },\n    \"timestamp\": \"2025-07-19T10:45:00Z\"\n}"
						}
					]
				},
				{
					"name": "Get Card by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for successful retrieval",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains card data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('cardName');",
									"    pm.expect(jsonData).to.have.property('barcodeData');",
									"    pm.expect(jsonData).to.have.property('barcodeType');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}",
								"description": "JWT token from login"
							}
						],
						"url": {
							"raw": "{{base_url}}/cards/{{created_card_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"cards",
								"{{created_card_id}}"
							]
						},
						"description": "Get a specific loyalty card by ID. Requires JWT token and card ownership."
					},
					"response": [
						{
							"name": "Successful Retrieval",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.example"
									}
								],
								"url": {
									"raw": "{{base_url}}/cards/1",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"cards",
										"1"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 1,\n    \"cardName\": \"Starbucks Rewards\",\n    \"barcodeData\": \"1234567890123\",\n    \"barcodeType\": \"EAN13\",\n    \"storeLogoUrl\": \"https://example.com/starbucks-logo.png\",\n    \"createdAt\": \"2025-07-19T08:30:00Z\"\n}"
						},
						{
							"name": "Card Not Found",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.example"
									}
								],
								"url": {
									"raw": "{{base_url}}/cards/999",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"cards",
										"999"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"error\": \"Not Found\",\n    \"message\": \"Card not found or access denied\",\n    \"timestamp\": \"2025-07-19T10:45:00Z\"\n}"
						}
					]
				},
				{
					"name": "Update Card",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for successful update",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains updated card\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('cardName');",
									"    pm.expect(jsonData.cardName).to.eql('Updated Card Name');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}",
								"description": "JWT token from login"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"cardName\": \"Updated Card Name\",\n    \"barcodeData\": \"1122334455667\",\n    \"barcodeType\": \"EAN13\",\n    \"storeLogoUrl\": \"https://example.com/updated-logo.png\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/cards/{{created_card_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"cards",
								"{{created_card_id}}"
							]
						},
						"description": "Update an existing loyalty card. Requires JWT token and card ownership."
					},
					"response": [
						{
							"name": "Successful Update",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.example"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"cardName\": \"Updated Card Name\",\n    \"barcodeData\": \"1122334455667\",\n    \"barcodeType\": \"EAN13\",\n    \"storeLogoUrl\": \"https://example.com/updated-logo.png\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/cards/1",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"cards",
										"1"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 1,\n    \"cardName\": \"Updated Card Name\",\n    \"barcodeData\": \"1122334455667\",\n    \"barcodeType\": \"EAN13\",\n    \"storeLogoUrl\": \"https://example.com/updated-logo.png\",\n    \"createdAt\": \"2025-07-19T08:30:00Z\"\n}"
						}
					]
				},
				{
					"name": "Delete Card",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for successful deletion",
									"pm.test(\"Status code is 200 or 204\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
									"});",
									"",
									"// Clear the card ID from environment",
									"pm.environment.unset('created_card_id');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}",
								"description": "JWT token from login"
							}
						],
						"url": {
							"raw": "{{base_url}}/cards/{{created_card_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"cards",
								"{{created_card_id}}"
							]
						},
						"description": "Delete a loyalty card. Requires JWT token and card ownership."
					},
					"response": [
						{
							"name": "Successful Deletion",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.example"
									}
								],
								"url": {
									"raw": "{{base_url}}/cards/1",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"cards",
										"1"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Card deleted successfully\"\n}"
						},
						{
							"name": "Card Not Found",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.example"
									}
								],
								"url": {
									"raw": "{{base_url}}/cards/999",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"cards",
										"999"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"error\": \"Not Found\",\n    \"message\": \"Card not found or access denied\",\n    \"timestamp\": \"2025-07-19T10:45:00Z\"\n}"
						}
					]
				}
			],
			"description": "Loyalty card CRUD operations - all require authentication"
		},
		{
			"name": "Health Check",
			"item": [
				{
					"name": "Server Health",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/health",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"health"
							]
						},
						"description": "Check if the API server is running and healthy. No authentication required."
					},
					"response": [
						{
							"name": "Server Healthy",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/health",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"health"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"status\": \"UP\",\n    \"timestamp\": \"2025-07-19T10:45:00Z\",\n    \"version\": \"1.0.0\"\n}"
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global pre-request script",
					"console.log('Running request to: ' + pm.request.url);"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global test script",
					"pm.test('Response time is less than 5 seconds', function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(5000);",
					"});",
					"",
					"pm.test('Response has correct content-type for JSON', function () {",
					"    if (pm.response.headers.get('Content-Type')) {",
					"        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
					"    }",
					"});"
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "https://cardkeep-backend.onrender.com/api",
			"type": "string"
		}
	]
}
